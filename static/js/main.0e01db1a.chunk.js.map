{"version":3,"sources":["components/AppLayout.js","reducers/reducerUtilities.js","components/analysis/buffer.js","components/analysis/intersection.js","components/analysis/dissolve.js","reducers/geometryCaseReducers.js","reducers/geometryReducer.js","reducers/geometryAnalysis.js","reducers/fileReducer.js","reducers/reducer.js","store/store.js","action-creators/actionCreator.js","components/menu/FileUpload.js","components/menu/NewFileMenu.js","components/menu/DataLayerPanel.js","components/menu/DatasetMenu.js","components/menu/BufferDialog.js","components/menu/AnalysisMenu.js","components/menu/AlphaPicker.js","components/menu/SliderColorPicker.js","components/menu/ColorPicker.js","components/menu/ColorMenu.js","components/menu/Sidebar.js","components/menu/Navbar.js","components/Map.js","App.js","index.js"],"names":["styled","div","updateItemByNameInLayers","itemList","itemNames","updateItemCallback","callBackArgs","updatedItems","map","item","indexOf","name","console","log","findUniqueName","state","geometry","affix","isNameUnique","layers","undefined","find","layer","originalName","nameIsUnique","i","addLayer","analysisType","displayName","color","activeColor","visible","triggeredAnalyses","createBuffer","geom","value","units","buffered","buffer","createIntersect","geom1","geom2","intersects","type","features","forEach","intersectGeom","intersect","createDissolve","dissolve","geometryReducer","initialState","handlers","action","hasOwnProperty","createReducer","selectedAnalysis","expandedLayer","selectedLayers","layersToDelete","layerToMove","ANALYSIS_CHOSEN","payload","ANALYSIS_TRIGGERED","toLowerCase","selectedLayerName","selectedLayer","element","index","bufferGeom","substring","resolveBufferTrigger","length","alert","selectedLayer1","index1","selectedLayer2","index2","resolveIntersectionTrigger","dissolveGeom","resolveDissolveTrigger","GEOMETRY_CREATE_TRIGGERED","GEOMETRY_DELETE_STARTED","layerToDelete","GEOMETRY_DELETE_FINALIZED","filter","LAYER_EXPANDED","layerIndex","LAYER_SELECTED","layerName","newSelectedLayers","Array","from","splice","DATA_LIST_REARRANGED","destination","source","newLayers","array","sourceIndex","destinationIndex","newArray","movedObject","moveItemInArray","LAYERS_REARRANGED_DONE","COLOR_CHANGE","newColor","args","LAYER_VISIBILITY_TRIGGER","result","lastValues","rootReducer","combineReducers","file","store","createStore","applyMiddleware","logger","analysisChoosen","analysisName","analysisTriggered","analysis","geometryCreateNew","bindActionCreators","dispatch","geometryStartDeletion","geomatryFinalizeDeletion","expandLayer","selectLayer","selectColor","hex","dataLayerDragEnd","layerVisibilityTrigger","fileUploaded","files","JSON","parse","actions","connect","accept","useDropzone","onDrop","reader","FileReader","onloadend","readAsText","getRootProps","getInputProps","isDragActive","className","useStyles","makeStyles","theme","root","width","details","display","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","secondaryHeading","palette","text","secondary","NewFileMenu","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","Typography","ExpansionPanelDetails","flexBasis","flexShrink","DataLayerPanel","draggableId","provided","draggableProps","dragHandleProps","innerRef","expanded","onChange","aria-label","FormControlLabel","onClick","event","target","stopPropagation","onFocus","control","Checkbox","label","CardActions","Button","size","appState","onDragEnd","droppableId","List","ref","droppableProps","key","placeholder","form","margin","spacing","SimpleDialog","props","onClose","selectedValue","open","React","useState","inputValue","setInputValue","Dialog","aria-labelledby","DialogTitle","noValidate","autoComplete","TextField","variant","BufferDialog","setOpen","ListItem","button","ListItemIcon","ListItemText","primary","dense","component","alphaDiv","position","marginTop","alpha","CustomPicker","onChangeComplete","AlphaPicker","padding","backgroundColor","ColorPicker","Paper","ColorMenu","styledSidebar","schools","currentAnalysis","StyledText","h1","styledNavbar","mapboxgl","accessToken","Map","lng","location","lat","zoom","activeLayers","this","_map","container","mapContainer","style","center","on","getCenter","setState","toFixed","getZoom","prevProps","newProps","prevLayers","addPointLayer","addPolygonLayer","setColorOfLayer","updateVisibility","removeMapLayer","updateLayerOrder","newLayer","data","paint","getSource","removeLayer","removeSource","delete_finalize","colorVariable","setPaintProperty","layerBeforeId","layerToUpdateId","moveLayer","layerVisibility","setLayoutProperty","el","Component","StyledMap","App","AppLayout","locations","oslo","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e01db1a.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  display: grid;\r\n  height: 100vh;\r\n  grid-template-columns: 400px 250px 1fr;\r\n  grid-template-rows: 10% 1fr;\r\n`;\r\n","export function updateItemInLayersId(state, itemId, updateItemCallback) {\r\n  const updatedItems = state.layers.map(item => {\r\n    if (item.id !== itemId) {\r\n      // Since we only want to update one item, preserve all others as they are now\r\n      return item;\r\n    }\r\n\r\n    // Use the provided callback to create an updated item\r\n    const updatedItem = updateItemCallback(state, item);\r\n    return updatedItem;\r\n  });\r\n\r\n  return updatedItems;\r\n}\r\n\r\nexport function updateItemByNameInLayers(itemList, itemNames, updateItemCallback, ...callBackArgs) {\r\n  const updatedItems = itemList.map(item => {\r\n    let index = itemNames.indexOf(item.name);\r\n    if (index < 0) {\r\n      // Since we only want to update items in the list, preserve all others as they are now\r\n      return item;\r\n    }\r\n\r\n    // Use the provided callback to create an updated item\r\n    const updatedItem = updateItemCallback(item, callBackArgs);\r\n\r\n    return updatedItem;\r\n  });\r\n  console.log(updatedItems);\r\n  return updatedItems;\r\n}\r\n\r\nexport function moveItemInArray(array, sourceIndex, destinationIndex) {\r\n  const newArray = Array.from(array);\r\n  const movedObject = array[sourceIndex];\r\n  newArray.splice(sourceIndex, 1);\r\n  newArray.splice(destinationIndex, 0, movedObject);\r\n  return newArray;\r\n}\r\n\r\nexport function createReducer(initialState, handlers) {\r\n  return function reducer(state = initialState, action) {\r\n    if (handlers.hasOwnProperty(action.type)) {\r\n      return handlers[action.type](state, action);\r\n    } else {\r\n      return state;\r\n    }\r\n  };\r\n}\r\n\r\nexport function findUniqueName(state, geometry, name = \"new_geometry\", affix = \"\") {\r\n  //If no name is given and the dataset includes a name, use it\r\n  if (geometry.name && name === \"new_geometry\") {\r\n    name = geometry.name;\r\n  }\r\n\r\n  //append any affix, usually to signify how the layer was created (e.g _buffer)\r\n  name = name + affix;\r\n\r\n  //check whether name is already in use, and try appending _1, _2, _3 etc until a name not in use is found\r\n  function isNameUnique(name, layers) {\r\n    if (layers.find(layer => layer.name === name) === undefined) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  var originalName = name;\r\n  var nameIsUnique = isNameUnique(name, state.layers);\r\n  var i = 1;\r\n  while (!nameIsUnique) {\r\n    name = originalName + \"_\" + i;\r\n    i += 1;\r\n\r\n    nameIsUnique = isNameUnique(name, state.layers);\r\n  }\r\n\r\n  return name;\r\n}\r\n\r\nexport function addLayer(state, layer, analysisType = \"new\") {\r\n  //Make a separate variable for display name in case we want to change it in the UI\r\n  layer.displayName = layer.name;\r\n\r\n  //Initialize color\r\n  layer.color = state.activeColor;\r\n\r\n  //Set visibility\r\n  layer.visible = true;\r\n\r\n  state = {\r\n    ...state,\r\n    layers: [layer, ...state.layers],\r\n    triggeredAnalyses: [...state.triggeredAnalyses, analysisType]\r\n  };\r\n  return state;\r\n}\r\n","import buffer from \"@turf/buffer\";\r\n\r\nconst createBuffer = (geom, value, units = \"meters\") => {\r\n  var buffered = buffer(geom, value, { units: units });\r\n  return buffered;\r\n};\r\n\r\nexport default createBuffer;\r\n","import intersect from \"@turf/intersect\";\r\n\r\nconst createIntersect = (geom1, geom2) => {\r\n  let intersects = {\r\n    type: \"FeatureCollection\",\r\n    features: []\r\n  };\r\n  console.log(geom1);\r\n  geom1.geometry.features.forEach(geom1 => {\r\n    geom2.geometry.features.forEach(geom2 => {\r\n      let intersectGeom = intersect(geom1, geom2);\r\n      if (intersectGeom !== null) {\r\n        intersects.features = [...intersects.features, intersectGeom];\r\n      }\r\n    });\r\n  });\r\n  return intersects;\r\n};\r\n\r\nexport default createIntersect;\r\n","import dissolve from \"@turf/dissolve\";\r\n\r\nconst createDissolve = (geom) => {\r\n  var dissolved = dissolve(geom);\r\n  return dissolved;\r\n};\r\n\r\nexport default createDissolve;\r\n","import {\r\n  moveItemInArray,\r\n  updateItemByNameInLayers,\r\n  addLayer,\r\n  findUniqueName\r\n} from \"./reducerUtilities\";\r\nimport {\r\n  resolveBufferTrigger,\r\n  resolveIntersectionTrigger,\r\n  resolveDissolveTrigger\r\n} from \"./geometryAnalysis\";\r\n\r\nexport const analysisChosen = (state, action) => {\r\n  return {\r\n    ...state,\r\n    selectedAnalysis: action.payload,\r\n    triggeredAnalyses: [...state.triggeredAnalyses, action.payload]\r\n  };\r\n};\r\n\r\nexport const analysisTriggered = (state, action) => {\r\n  if (action.payload.type) {\r\n    switch (action.payload.type.toLowerCase()) {\r\n      case \"buffer\":\r\n        return resolveBufferTrigger(state, action);\r\n      case \"intersection\":\r\n        return resolveIntersectionTrigger(state, action);\r\n      case \"dissolve\":\r\n        return resolveDissolveTrigger(state, action);\r\n      default:\r\n        console.log(\"Selected analysis is invalid\");\r\n        return state;\r\n    }\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const geometryCreateTriggered = (state, action) => {\r\n  let geometry = action.payload;\r\n  let name = findUniqueName(state, geometry);\r\n\r\n  var layer = {\r\n    geometry: geometry,\r\n    name: name,\r\n    type: \"point\"\r\n  };\r\n  return addLayer(state, layer);\r\n};\r\n\r\nexport const geometryDeleteStarted = (state, action) => {\r\n  const layerToDelete = state.layers.find(\r\n    layer => layer.name === action.payload\r\n  );\r\n  return {\r\n    ...state,\r\n    layersToDelete: [...state.layersToDelete, layerToDelete]\r\n  };\r\n};\r\n\r\nexport const geometryDeleteFinalized = (state, action) => {\r\n  return {\r\n    ...state,\r\n    layers: state.layers.filter(\r\n      layer => layer.name !== state.layersToDelete[0].name\r\n    ),\r\n    layersToDelete: []\r\n  };\r\n};\r\n\r\nexport const layerExpanded = (state, action) => {\r\n  let layerIndex = action.payload;\r\n  //Pane is already open, close it instead\r\n  if (state.expandedLayer === layerIndex) {\r\n    layerIndex = -1;\r\n  }\r\n  return {\r\n    ...state,\r\n    expandedLayer: layerIndex\r\n  };\r\n};\r\n\r\nexport const layerSelected = (state, action) => {\r\n  let layerName = action.payload;\r\n  let newSelectedLayers = Array.from(state.selectedLayers);\r\n  let index = newSelectedLayers.indexOf(layerName);\r\n\r\n  //If found remove, else add to selected layers\r\n  if (index >= 0) {\r\n    newSelectedLayers.splice(index, 1);\r\n  } else {\r\n    newSelectedLayers = [...newSelectedLayers, layerName];\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    selectedLayers: newSelectedLayers\r\n  };\r\n};\r\n\r\nexport const layersRearranged = (state, action) => {\r\n  const { destination, source } = action.payload;\r\n  const newLayers = moveItemInArray(\r\n    state.layers,\r\n    source.index,\r\n    destination.index\r\n  );\r\n\r\n  //Update reference to expanded layer\r\n  var expandedLayer = state.expandedLayer;\r\n  if (source.index === expandedLayer) {\r\n    expandedLayer = destination.index;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    layers: newLayers,\r\n    expandedLayer: expandedLayer,\r\n    layerToMove: destination.index\r\n  };\r\n};\r\n\r\nexport const layersRearrangedDone = (state, action) => {\r\n  return {\r\n    ...state,\r\n    layerToMove: -1\r\n  };\r\n};\r\n\r\nexport const layerVisibilityTrigger = (state, action) => {\r\n  const changeVisibility = (layer) => {\r\n    console.log(\"hello 2\");\r\n    let visible = !(layer.visible);\r\n    let newLayer = {\r\n      ...layer,\r\n      visible: visible\r\n    };\r\n    return newLayer;\r\n  }\r\n  console.log(\"hello 1\")\r\n  let newLayers = updateItemByNameInLayers(state.layers, [action.payload], changeVisibility);\r\n  \r\n  state = {\r\n    ...state,\r\n    layers: newLayers\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const colorChange = (state, action) => {\r\n  const changeLayerColor = (layer, args) => {\r\n    let color = args[0];\r\n    let newLayer = {\r\n      ...layer,\r\n      color: color\r\n    };\r\n    return newLayer;\r\n  };\r\n  //Create a new layers array that is the same except for one color change to selected layer\r\n  let newColor = action.payload;\r\n  let newLayers = updateItemByNameInLayers(\r\n    state.layers,\r\n    state.selectedLayers,\r\n    changeLayerColor,\r\n    newColor\r\n  );\r\n  let newState = Array.from(state);\r\n\r\n  newState = {\r\n    ...state,\r\n    layers: newLayers,\r\n    activeColor: newColor\r\n  };\r\n\r\n  return newState;\r\n};\r\n","import {\r\n  analysisChosen,\r\n  analysisTriggered,\r\n  geometryCreateTriggered,\r\n  layerExpanded,\r\n  layerSelected,\r\n  colorChange,\r\n  geometryDeleteStarted,\r\n  geometryDeleteFinalized,\r\n  layersRearranged,\r\n  layersRearrangedDone,\r\n  layerVisibilityTrigger\r\n} from \"./geometryCaseReducers\";\r\nimport { createReducer } from \"./reducerUtilities\";\r\n\r\nexport const initialGeometryState = {\r\n  selectedAnalysis: \"buffer\",\r\n  triggeredAnalyses: [],\r\n  expandedLayer: -1,\r\n  selectedLayers: [],\r\n  layers: [],\r\n  layersToDelete: [],\r\n  layerToMove: -1,\r\n  activeColor: \"#001eff\"\r\n};\r\n\r\nexport const geometryReducer = createReducer(initialGeometryState, {\r\n  ANALYSIS_CHOSEN: analysisChosen,\r\n  ANALYSIS_TRIGGERED: analysisTriggered,\r\n  GEOMETRY_CREATE_TRIGGERED: geometryCreateTriggered,\r\n  GEOMETRY_DELETE_STARTED: geometryDeleteStarted,\r\n  GEOMETRY_DELETE_FINALIZED: geometryDeleteFinalized,\r\n  LAYER_EXPANDED: layerExpanded,\r\n  LAYER_SELECTED: layerSelected,\r\n  DATA_LIST_REARRANGED: layersRearranged,\r\n  LAYERS_REARRANGED_DONE: layersRearrangedDone,\r\n  COLOR_CHANGE: colorChange,\r\n  LAYER_VISIBILITY_TRIGGER: layerVisibilityTrigger\r\n})","import { findUniqueName, addLayer } from \"./reducerUtilities\";\r\nimport createBuffer from \"../components/analysis/buffer\";\r\nimport createIntersect from \"../components/analysis/intersection\";\r\nimport createDissolve from \"../components/analysis/dissolve\";\r\n\r\nexport function resolveBufferTrigger(state, action) {\r\n  var value = action.payload.value;\r\n  state.selectedLayers.forEach(selectedLayerName => {\r\n    let selectedLayer = state.layers.find(\r\n      element => element.name === selectedLayerName\r\n    );\r\n    let index = state.layers.indexOf(selectedLayer);\r\n    let geom = state.layers[index].geometry;\r\n    let bufferGeom = createBuffer(geom, value);\r\n    let name = state.layers[index].name.substring(0, 8);\r\n    name = findUniqueName(state, geom, name, \"_buffer\");\r\n    let layer = {\r\n      geometry: bufferGeom,\r\n      name: name,\r\n      type: \"polygon\"\r\n    };\r\n    state = addLayer(state, layer, \"buffer\");\r\n  });\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveIntersectionTrigger(state, action) {\r\n  if (state.selectedLayers.length !== 2) {\r\n    alert(\"Select two layers to do an intersection\");\r\n    return state;\r\n  }\r\n\r\n  let selectedLayer1 = state.layers.find(\r\n    element => element.name === state.selectedLayers[0]\r\n  );\r\n  let index1 = state.layers.indexOf(selectedLayer1);\r\n  let geom1 = state.layers[index1];\r\n\r\n  let selectedLayer2 = state.layers.find(\r\n    element => element.name === state.selectedLayers[1]\r\n  );\r\n  let index2 = state.layers.indexOf(selectedLayer2);\r\n  let geom2 = state.layers[index2];\r\n\r\n  if (!(geom1.type === \"polygon\" && geom2.type === \"polygon\")) {\r\n    alert(\"Both layers selected must be polygons\");\r\n    return state;\r\n  }\r\n\r\n  let intersectGeom = createIntersect(geom1, geom2);\r\n  let name =\r\n    state.layers[index1].name.substring(0, 5) +\r\n    \"_\" +\r\n    state.layers[index2].name.substring(0, 5);\r\n  name = findUniqueName(state, geom1, name, \"_intersect\");\r\n  let layer = {\r\n    geometry: intersectGeom,\r\n    name: name,\r\n    type: \"polygon\" //TODO handle line and point overlap\r\n  };\r\n\r\n  state = addLayer(state, layer, \"intersect\");\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveDissolveTrigger(state, action) {\r\n  if (state.selectedLayers.length !== 1) {\r\n    alert(\"Please choose exactly one layer to dissolve\");\r\n    return state;\r\n  }\r\n\r\n  let selectedLayer = state.layers.find(\r\n    element => element.name === state.selectedLayers[0]\r\n  );\r\n  let index = state.layers.indexOf(selectedLayer);\r\n\r\n  let geom = selectedLayer.geometry;\r\n  console.log(geom.type);\r\n  if (geom.type !== \"FeatureCollection\") {\r\n    alert(\"Dissolve requires a FeatureCollection layer to be selected\");\r\n    return state;\r\n  }\r\n\r\n  let dissolveGeom = createDissolve(geom);\r\n\r\n  let name = state.layers[index].name.substring(0, 8);\r\n  name = findUniqueName(state, geom, name, \"_dissolve\");\r\n  let layer = {\r\n    geometry: dissolveGeom,\r\n    name: name,\r\n    type: \"polygon\"\r\n  };\r\n\r\n  state = addLayer(state, layer, \"dissolve\");\r\n\r\n  return state;\r\n}\r\n","\r\nconst initialState = {\r\n    result: 1,\r\n    lastValues: []\r\n  };\r\n  \r\n export const fileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case \"FILES_UPLOADED\":\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return state;\r\n  };","import { combineReducers } from \"redux\";\r\nimport { geometryReducer } from \"./geometryReducer\";\r\nimport { fileReducer } from \"./fileReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  geometry: geometryReducer,\r\n  file: fileReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import rootReducer from \"../reducers/reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst store = createStore(rootReducer, {}, applyMiddleware(logger));\r\n\r\nexport default store;\r\n","import { bindActionCreators } from \"redux\";\r\n\r\nimport store from \"../store/store\";\r\n\r\nexport const analysisChoosen = analysisName => ({\r\n  type: \"ANLYSIS_CHOOSEN\",\r\n  payload: analysisName\r\n});\r\nexport const analysisTriggered = analysis => ({\r\n  type: \"ANALYSIS_TRIGGERED\",\r\n  payload: analysis\r\n});\r\n\r\nexport const analysisActions = bindActionCreators(\r\n  {\r\n    analysisChoosen,\r\n    analysisTriggered\r\n  },\r\n  store.dispatch\r\n);\r\n\r\nexport const geometryCreateNew = geometry => ({\r\n  type: \"GEOMETRY_CREATE_TRIGGERED\",\r\n  payload: geometry\r\n});\r\nexport const geometryStartDeletion = name => ({\r\n  type: \"GEOMETRY_DELETE_STARTED\",\r\n  payload: name\r\n});\r\n\r\nexport const geomatryFinalizeDeletion = () => ({\r\n  type: \"GEOMETRY_DELETE_FINALIZED\"\r\n});\r\n\r\nexport const expandLayer = index => ({\r\n  type: \"LAYER_EXPANDED\",\r\n  payload: index\r\n});\r\n\r\nexport const selectLayer = name => ({\r\n  type: \"LAYER_SELECTED\",\r\n  payload: name\r\n});\r\n\r\n\r\nexport const selectColor = hex => ({\r\n  type: \"COLOR_CHANGE\",\r\n  payload: hex\r\n});\r\n\r\nexport const dataLayerDragEnd = result => ({\r\n  type: \"DATA_LIST_REARRANGED\",\r\n  payload: result\r\n});\r\n\r\nexport const layerVisibilityTrigger = layer => ({\r\n  type: \"LAYER_VISIBILITY_TRIGGER\",\r\n  payload: layer\r\n})\r\n\r\nexport const geometryActions = bindActionCreators(\r\n  {\r\n    geometryCreateNew,\r\n    geometryStartDeletion,\r\n    geomatryFinalizeDeletion,\r\n    expandLayer,\r\n    selectLayer,\r\n    selectColor,\r\n    dataLayerDragEnd,\r\n    layerVisibilityTrigger\r\n  },\r\n  store.dispatch\r\n);\r\n\r\nexport const fileUploaded = files => ({\r\n  type: \"GEOMETRY_CREATE_TRIGGERED\",\r\n  payload: JSON.parse(files)\r\n});\r\n\r\nexport const fileActions = bindActionCreators(\r\n  {\r\n    fileUploaded\r\n  },\r\n  store.dispatch\r\n);\r\n","import React from \"react\";\r\n// Import the useDropzone hooks from react-dropzone\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { connect } from \"react-redux\";\r\nimport { fileUploaded } from \"../../action-creators/actionCreator\";\r\n\r\n\r\n\r\nconst FileUpload = ({ fileUploaded, accept }) => {\r\n  const onDrop = files => {\r\n    if (files && files[0]) {\r\n      let reader = new FileReader();\r\n      let file = files[0];\r\n  \r\n      reader.onloadend = () => {\r\n        fileUploaded(reader.result);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n  \r\n  // Initializing useDropzone hooks with options\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept\r\n  });\r\n\r\n  /* \r\n    useDropzone hooks exposes two functions called getRootProps and getInputProps\r\n    and also exposes isDragActive boolean\r\n  */\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input className=\"dropzone-input\" {...getInputProps()} />\r\n      <div className=\"text-center\">\r\n        {isDragActive ? (\r\n          <p className=\"dropzone-content\">Release to drop the files here</p>\r\n        ) : (\r\n          <p className=\"dropzone-content\">\r\n            Drag 'n' drop some files here, or click to select files\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst actions = {\r\n  fileUploaded: fileUploaded\r\n};\r\n\r\nexport default connect(null, actions)(FileUpload);\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  CardActions,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FileUpload from \"./FileUpload\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst NewFileMenu = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Add data</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <FileUpload accept={\"application/json\"}/>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewFileMenu;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  CardActions,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst DataLayerPanel = ({\r\n  name,\r\n  index,\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  selectLayer,\r\n  expandedLayer,\r\n  layerVisibilityTrigger\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Draggable draggableId={name} index={index}>\r\n      {provided => (\r\n        <ExpansionPanel\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          innerRef={provided.innerRef}\r\n          expanded={index === expandedLayer}\r\n          onChange={() => expandLayer(index)}\r\n        >\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-label=\"Expand\"\r\n            aria-controls=\"additional-actions1-content\"\r\n            id=\"additional-actions1-header\"\r\n          >\r\n            <FormControlLabel\r\n              aria-label=\"Select\"\r\n              onClick={event => {\r\n                //Filter out the double onclick when clicking on the text\r\n                if (event.target.type === \"checkbox\") {\r\n                  selectLayer(name);\r\n                }\r\n                //Want to stop expansion effect, just select\r\n                event.stopPropagation();\r\n              }}\r\n              onFocus={event => {\r\n                event.stopPropagation();\r\n              }}\r\n              control={<Checkbox />}\r\n              label={name}\r\n            />\r\n            {/* <Typography className={classes.heading}>{name}</Typography> */}\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <CardActions className={classes.actions}>\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => alert(\"Renaming not yet implemented\")}\r\n              >\r\n                Rename\r\n              </Button>\r\n              <Button size=\"small\" onClick={() => layerVisibilityTrigger(name)}>\r\n                Toggle visibility\r\n              </Button>\r\n              <Button size=\"small\" onClick={() => geometryStartDeletion(name)}>\r\n                Delete\r\n              </Button>\r\n            </CardActions>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default DataLayerPanel;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  List\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport DataLayerPanel from \"./DataLayerPanel\";\r\n\r\nimport {\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  dataLayerDragEnd,\r\n  selectLayer,\r\n  layerVisibilityTrigger\r\n} from \"../../action-creators/actionCreator\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst DatasetMenu = ({\r\n  expandedLayer,\r\n  layers,\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  selectLayer,\r\n  dataLayerDragEnd,\r\n  layerVisibilityTrigger\r\n}) => {\r\n  const classes = useStyles();\r\n  \r\n  const onDragEnd = result => {\r\n    const { destination, source } = result;\r\n    //dropped outside of context or otherwise no destination\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    //not moved\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    dataLayerDragEnd(result);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Datasets</Typography>\r\n        </ExpansionPanelSummary>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          {/* Everything that is shown on the open panel, but not the closed */}\r\n          <ExpansionPanelDetails className={classes.details}>\r\n            <List>\r\n              <Droppable droppableId=\"datasetMenu\">\r\n                {provided => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    provided={provided}\r\n                  >\r\n                    {layers.map((layer, index) => (\r\n                      <DataLayerPanel\r\n                        className=\"layer\"\r\n                        key={layer.name}\r\n                        name={layer.name}\r\n                        index={index}\r\n                        geometryStartDeletion={geometryStartDeletion}\r\n                        expandLayer={expandLayer}\r\n                        selectLayer={selectLayer}\r\n                        expandedLayer={expandedLayer}\r\n                        layerVisibilityTrigger={layerVisibilityTrigger}\r\n                      ></DataLayerPanel>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </List>\r\n          </ExpansionPanelDetails>\r\n        </DragDropContext>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst select = appState => ({\r\n  expandedLayer: appState.geometry.expandedLayer,\r\n  layers: appState.geometry.layers\r\n});\r\n\r\nconst actions = {\r\n  geometryStartDeletion: geometryStartDeletion,\r\n  expandLayer: expandLayer,\r\n  selectLayer: selectLayer,\r\n  dataLayerDragEnd: dataLayerDragEnd,\r\n  layerVisibilityTrigger: layerVisibilityTrigger\r\n};\r\n\r\nexport default connect(select, actions)(DatasetMenu);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AdjustIcon from \"@material-ui/icons/Adjust\";\r\nimport {\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  ListItemText,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: 200\r\n    }\r\n  }\r\n}));\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, selectedValue, open } = props;\r\n\r\n  const handleClick = value => {\r\n    onClose(value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  let [inputValue, setInputValue] = React.useState(50);\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Set size of buffer</DialogTitle>\r\n      <form className={classes.form} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"meters\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          onChange={event => setInputValue(event.target.value)}\r\n        />\r\n      </form>\r\n      <Button onClick={() => (handleClick(inputValue))}>Done</Button>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst BufferDialog = ({ analysisTriggered }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = value => {\r\n    setOpen(false);\r\n    analysisTriggered({ type: \"buffer\", value: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n          <AdjustIcon />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary=\"Buffer\"\r\n          secondary=\"Create polygon of all within X meters\"\r\n        />\r\n      </ListItem>\r\n      <SimpleDialog\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default BufferDialog;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport CropIcon from \"@material-ui/icons/Crop\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { analysisTriggered } from \"../../action-creators/actionCreator\";\r\nimport { connect } from \"react-redux\";\r\nimport BufferDialog from \"./BufferDialog\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst AnalysisMenu = ({ analysisTriggered }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Analysis</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <List dense={true} component=\"nav\" aria-label=\"main mailbox folders\">\r\n            <BufferDialog analysisTriggered={analysisTriggered}></BufferDialog>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"intersection\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <CropIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Intersection\"\r\n                secondary=\"Find the overlap between two polygons\"\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"dissolve\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <LensIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Dissolve\"\r\n                secondary=\"Combine polygons overlapping themselves\"\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const select = appState => {\r\n//   return {};\r\n// };\r\nconst actions = {\r\n  analysisTriggered: analysisTriggered\r\n};\r\n\r\nexport default connect(null, actions)(AnalysisMenu);\r\n","import React from \"react\";\r\nimport { CustomPicker, AlphaPicker } from \"react-color\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  alphaDiv: {\r\n    width: \"100%\",\r\n    margin: \"auto\",\r\n    position: \"relative\",\r\n    marginTop: \"20px\"\r\n  },\r\n  alpha: {\r\n    position: \"relative\"\r\n  }\r\n}));\r\nconst MyAlphaPicker = ({ color, onChange, ...props }) => {\r\n  const classes = useStyles();\r\n\r\n  return <AlphaPicker {...props} className={classes.alphaDiv} />;\r\n};\r\n\r\nexport default CustomPicker(MyAlphaPicker);\r\n","import React from \"react\";\r\nimport { SliderPicker } from \"react-color\";\r\nimport { selectColor } from \"../../action-creators/actionCreator\";\r\nimport { connect } from \"react-redux\";\r\nimport AlphaPicker from \"./AlphaPicker\";\r\n\r\nconst SliderColorPicker = ({ activeColor, selectColor }) => {\r\n  return (\r\n    <div>\r\n      <SliderPicker\r\n        color={activeColor}\r\n        onChangeComplete={color => selectColor(color.hex)}\r\n      />\r\n      <AlphaPicker\r\n        color={activeColor}\r\n        onChange={color => selectColor(color.hex)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst select = appState => {\r\n  return {\r\n    activeColor: appState.geometry.activeColor\r\n  };\r\n};\r\n\r\nconst actions = {\r\n  selectColor: selectColor\r\n};\r\n\r\nexport default connect(select, actions)(SliderColorPicker);\r\n","import React from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SliderColorPicker from \"./SliderColorPicker\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n    width: \"90%\",\r\n    margin: \"auto\",\r\n    backgroundColor: \"#e8e8e8\"\r\n  }\r\n}));\r\n\r\nconst ColorPicker = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <SliderColorPicker />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst ColorMenu = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Color/Visibility</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <ColorPicker />\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMenu;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  analysisChoosen,\r\n  geometryCreateNew,\r\n  analysisTriggered\r\n} from \"../../action-creators/actionCreator\";\r\nimport NewFileMenu from \"./NewFileMenu\";\r\nimport DatasetMenu from \"./DatasetMenu\";\r\nimport AnalysisMenu from \"./AnalysisMenu\";\r\nimport ColorMenu from \"./ColorMenu\";\r\nimport schools from \"../../data/videregaaende.json\";\r\n\r\nconst Sidebar = ({\r\n  className,\r\n  analysisChoosen,\r\n  geometryCreateNew,\r\n  analysisTriggered\r\n}) => {\r\n  return (\r\n    <div className={className}>\r\n      <Button onClick={() => analysisChoosen(\"Buffer\")}>Choose buffer</Button>\r\n      <Button onClick={() => geometryCreateNew(schools)}>\r\n        Create geometry\r\n      </Button>\r\n      <Button onClick={() => analysisTriggered(200)}>Trigger</Button>\r\n      <NewFileMenu />\r\n      <DatasetMenu />\r\n      <AnalysisMenu />\r\n      <ColorMenu />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styledSidebar = styled(Sidebar)`\r\n  grid-column: 1;\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n  background-color: #4e3a4c;\r\n  overflow: auto;\r\n`;\r\n\r\nconst select = appState => {\r\n  return {\r\n    currentAnalysis: appState.currentAnalysis\r\n  };\r\n};\r\nconst actions = {\r\n  analysisChoosen: analysisChoosen,\r\n  geometryCreateNew: geometryCreateNew,\r\n  analysisTriggered: analysisTriggered\r\n};\r\n\r\nexport default connect(select, actions)(styledSidebar);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledText = styled.h1`\r\n  // text-color: #4e3a40;\r\n`;\r\n\r\nconst Navbar = ({ className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <StyledText>Hello world</StyledText>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styledNavbar = styled(Navbar)`\r\n  grid-column-start: 1;\r\n  grid-column-end: 4;\r\n  grid-row-start: 1;\r\n  grid-row-end: 1;\r\n  background-color: #4e3a4c;\r\n`;\r\n\r\nexport default styledNavbar;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { connect } from \"react-redux\";\r\nimport { geomatryFinalizeDeletion } from \"../action-creators/actionCreator\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidG9vbGF0ZSIsImEiOiJjamNraXM3cWMwdHJ4MnFwZ2tuOXdlM29tIn0.YCpu-_2IAVCvVJEEit8WGQ\";\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: props.location.lng,\r\n      lat: props.location.lat,\r\n      zoom: props.location.zoom,\r\n      activeLayers: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const { lng, lat, zoom } = this.state;\r\n    this._map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: \"mapbox://styles/mapbox/streets-v9\",\r\n      center: [lng, lat],\r\n      zoom\r\n    });\r\n    var map = this._map;\r\n    map.on(\"move\", () => {\r\n      const { lng, lat } = map.getCenter();\r\n      this.setState({\r\n        lng: lng.toFixed(4),\r\n        lat: lat.toFixed(4),\r\n        zoom: map.getZoom().toFixed(2)\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    var newProps = this.props;\r\n    var newLayers = newProps.layers;\r\n    var prevLayers = prevProps.layers;\r\n\r\n    //new layer, add it\r\n    if (newLayers.length > prevLayers.length) {\r\n      let layer = newLayers[0];\r\n      switch (layer.type) {\r\n        case \"point\":\r\n          this.addPointLayer(layer);\r\n          break;\r\n        case \"polygon\":\r\n          this.addPolygonLayer(layer);\r\n          break;\r\n        default:\r\n          console.log(\"invalid layer type\");\r\n          break;\r\n      }\r\n    }\r\n    //No new layers, can compare new and old props\r\n    else {\r\n      if (newProps.activeColor !== prevProps.activeColor) {\r\n        newProps.selectedLayers.forEach(selectedLayerName => {\r\n          let selectedLayer = newProps.layers.find(\r\n            layer => layer.name === selectedLayerName\r\n          );\r\n          this.setColorOfLayer(selectedLayer);\r\n        });\r\n      }\r\n\r\n      //Loop over layers to check for differences\r\n      newProps.layers.forEach(layer => {\r\n        this.updateVisibility(layer);\r\n      });\r\n    }\r\n\r\n    //Delete layers marked for deletion\r\n    if (newProps.layersToDelete.length > 0) {\r\n      newProps.layersToDelete.forEach(layer => this.removeMapLayer(layer));\r\n    }\r\n\r\n    if (newProps.layerToMove >= 0) {\r\n      this.updateLayerOrder(newProps.layerToMove);\r\n    }\r\n  }\r\n\r\n  addPointLayer(layer) {\r\n    let newLayer = this._map.addLayer({\r\n      id: layer.name,\r\n      type: \"circle\",\r\n      source: {\r\n        type: \"geojson\",\r\n        data: layer.geometry\r\n      },\r\n      paint: { \"circle-color\": layer.color }\r\n    });\r\n\r\n    this.setState({\r\n      activeLayers: [...this.state.activeLayers, newLayer]\r\n    });\r\n  }\r\n\r\n  addPolygonLayer(layer) {\r\n    var newLayer = this._map.addLayer({\r\n      id: layer.name,\r\n      type: \"fill\",\r\n      source: {\r\n        type: \"geojson\",\r\n        data: layer.geometry\r\n      },\r\n      // layout: {\r\n      //   \"fill-color\": \"#00ff00\",\r\n      //   \"fill-opacity\": 0.2\r\n      // },\r\n      paint: { \"fill-color\": layer.color, \"fill-outline-color\": \"#000000\" }\r\n    });\r\n\r\n    this.setState({\r\n      activeLayers: [...this.state.activeLayers, newLayer]\r\n    });\r\n  }\r\n\r\n  removeMapLayer(layerToDelete) {\r\n    //check whether delete list is stale\r\n    if (!this._map.getSource(layerToDelete.name)) {\r\n      return;\r\n    }\r\n\r\n    this._map.removeLayer(layerToDelete.name);\r\n    this._map.removeSource(layerToDelete.name);\r\n    this.props.delete_finalize();\r\n  }\r\n\r\n  setColorOfLayer(layer) {\r\n    let colorVariable = \"\";\r\n    if (layer.type === \"point\") {\r\n      colorVariable = \"circle-color\";\r\n    } else if (layer.type === \"polygon\") {\r\n      colorVariable = \"fill-color\";\r\n    }\r\n\r\n    this._map.setPaintProperty(layer.name, colorVariable, layer.color);\r\n  }\r\n\r\n  updateLayerOrder(index) {\r\n    let layers = this.props.layers;\r\n    let layerToUpdateId = layers[index].name;\r\n    let layerBeforeId;\r\n    //If moved to the top of the list, don't draw it behind anything\r\n    if (index === 0) {\r\n      layerBeforeId = null;\r\n    }\r\n    //Else, move it to the spot behind the entry above it in the list\r\n    else {\r\n      layerBeforeId = layers[index - 1].name;\r\n    }\r\n    this._map.moveLayer(layerToUpdateId, layerBeforeId);\r\n  }\r\n\r\n  updateVisibility(layer) {\r\n    var layerVisibility = layer.visible ? \"visible\" : \"none\";\r\n    this._map.setLayoutProperty(layer.name, 'visibility', layerVisibility);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.className}\r\n        ref={el => (this.mapContainer = el)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledMap = styled(Map)`\r\n  grid-column-start: 2;\r\n  grid-column-end: 4;\r\n  grid-row-start: 2;\r\n  grid-row-end: 4;\r\n`;\r\n\r\nconst select = appState => {\r\n  return {\r\n    selectedLayers: appState.geometry.selectedLayers,\r\n    layers: appState.geometry.layers,\r\n    layersToDelete: appState.geometry.layersToDelete,\r\n    layerToMove: appState.geometry.layerToMove,\r\n    activeColor: appState.geometry.activeColor\r\n  };\r\n};\r\n\r\nconst actions = {\r\n  delete_finalize: geomatryFinalizeDeletion\r\n};\r\n\r\nexport default connect(select, actions)(StyledMap);\r\n","import React, { Component } from \"react\";\r\n\r\nimport AppLayout from \"./components/AppLayout\";\r\nimport Sidebar from \"./components/menu/Sidebar\";\r\nimport Navbar from \"./components/menu/Navbar\";\r\nimport Map from \"./components/Map\";\r\nimport locations from \"./data/locations.json\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AppLayout>\r\n          <Navbar />\r\n          <Sidebar />\r\n          <Map location={locations.oslo} />\r\n        </AppLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}