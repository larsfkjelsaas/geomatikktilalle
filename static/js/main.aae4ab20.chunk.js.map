{"version":3,"sources":["components/AppLayout.js","reducers/reducerUtilities.js","analysis/buffer.js","analysis/intersection.js","analysis/dissolve.js","analysis/union.js","reducers/geometryAnalysis.js","reducers/geometryCaseReducers.js","reducers/geometryReducer.js","reducers/reducer.js","store/store.js","action-creators/actionCreator.js","components/menu/new/FileUpload.js","components/menu/new/NewFileMenu.js","components/menu/layer/DataLayerPanel.js","components/menu/layer/DatasetMenu.js","components/menu/analysis/BufferDialog.js","components/menu/analysis/AnalysisMenu.js","components/menu/color/SliderColorPicker.js","components/menu/color/ColorPicker.js","components/menu/color/ColorMenu.js","components/menu/Sidebar.js","components/menu/top/Navbar.js","components/Map.js","components/App.js","index.js"],"names":["styled","div","updateItemByNameInLayers","itemList","itemNames","updateItemCallback","callBackArgs","updatedItems","map","item","indexOf","name","console","log","findUniqueName","state","geometry","affix","isNameUnique","layers","undefined","find","layer","originalName","nameIsUnique","i","addLayer","analysisType","displayName","color","activeColor","visible","triggeredAnalysis","createBuffer","geom","value","units","buffered","buffer","createIntersect","geom1","geom2","intersects","type","features","forEach","intersectGeom","intersect","createDissolve","newGeom","filter","feature","dissolve","createUnion","geoms","newGeoms","geomFeatures","reduce","total","union","findSelectedLayers","selectedLayers","selectedLayerName","element","selectedLayer","index","initialState","handlers","geometryReducer","selectedAnalysis","expandedLayer","layersToDelete","layerToMove","ANALYSIS_CHOSEN","action","payload","ANALYSIS_TRIGGERED","toLowerCase","length","alert","bufferGeom","substring","resolveBufferTrigger","selectedLayer1","index1","selectedLayer2","index2","resolveIntersectionTrigger","dissolveGeom","resolveDissolveTrigger","geometries","currentLayer","unionGeom","resolveUnionTrigger","resolveDifferenceTrigger","GEOMETRY_CREATE_TRIGGERED","GEOMETRY_DELETE_STARTED","layerToDelete","GEOMETRY_DELETE_FINALIZED","LAYER_EXPANDED","layerIndex","LAYER_SELECTED","layerName","newSelectedLayers","Array","from","splice","DATA_LIST_REARRANGED","destination","source","newLayers","array","sourceIndex","destinationIndex","newArray","movedObject","moveItemInArray","LAYERS_REARRANGED_DONE","COLOR_CHANGE","newColor","args","LAYER_VISIBILITY_TRIGGER","hasOwnProperty","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","analysisTriggered","analysis","geometryStartDeletion","bindActionCreators","analysisChoosen","analysisName","dispatch","geomatryFinalizeDeletion","expandLayer","selectLayer","selectColor","hex","dataLayerDragEnd","result","layerVisibilityTrigger","fileUploaded","geometryCreateNew","files","JSON","parse","actions","connect","accept","useDropzone","onDrop","reader","FileReader","file","onloadend","readAsText","getRootProps","getInputProps","isDragActive","className","useStyles","makeStyles","theme","root","width","details","display","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","secondaryHeading","palette","text","secondary","NewFileMenu","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","Typography","ExpansionPanelDetails","flexBasis","flexShrink","DataLayerPanel","draggableId","provided","draggableProps","dragHandleProps","innerRef","expanded","onChange","aria-label","FormControlLabel","onClick","event","target","stopPropagation","onFocus","control","Checkbox","label","CardActions","Button","size","appState","onDragEnd","droppableId","List","ref","droppableProps","key","placeholder","form","margin","spacing","SimpleDialog","props","onClose","selectedValue","open","React","useState","inputValue","setInputValue","Dialog","aria-labelledby","DialogTitle","noValidate","autoComplete","TextField","variant","BufferDialog","setOpen","ListItem","button","ListItemIcon","ListItemText","primary","dividerFullWidth","dense","component","Divider","onChangeComplete","padding","backgroundColor","ColorPicker","Paper","ColorMenu","styledSidebar","flexWrap","overflow","background","paper","gridList","title","light","titleBar","styledNavbar","mapboxgl","accessToken","Map","lng","location","lat","zoom","activeLayers","this","_map","container","mapContainer","style","center","on","getCenter","setState","toFixed","getZoom","prevProps","newProps","prevLayers","numberOfNewLayers","addPointLayer","addLineLayer","addPolygonLayer","setColorOfLayer","updateVisibility","removeMapLayer","updateLayerOrder","newLayer","data","paint","getSource","removeLayer","removeSource","delete_finalize","colorVariable","setPaintProperty","layerBeforeId","layerToUpdateId","moveLayer","layerVisibility","setLayoutProperty","el","Component","StyledMap","App","AppLayout","locations","oslo","render","document","getElementById"],"mappings":"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","file":"static/js/main.aae4ab20.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  display: grid;\r\n  height: 100vh;\r\n  grid-template-columns: 400px 250px 1fr;\r\n  grid-template-rows: 10% 1fr;\r\n`;\r\n","export function updateItemInLayersId(state, itemId, updateItemCallback) {\r\n  const updatedItems = state.layers.map(item => {\r\n    if (item.id !== itemId) {\r\n      // Since we only want to update one item, preserve all others as they are now\r\n      return item;\r\n    }\r\n\r\n    // Use the provided callback to create an updated item\r\n    const updatedItem = updateItemCallback(state, item);\r\n    return updatedItem;\r\n  });\r\n\r\n  return updatedItems;\r\n}\r\n\r\nexport function updateItemByNameInLayers(itemList, itemNames, updateItemCallback, ...callBackArgs) {\r\n  const updatedItems = itemList.map(item => {\r\n    let index = itemNames.indexOf(item.name);\r\n    if (index < 0) {\r\n      // Since we only want to update items in the list, preserve all others as they are now\r\n      return item;\r\n    }\r\n\r\n    // Use the provided callback to create an updated item\r\n    const updatedItem = updateItemCallback(item, callBackArgs);\r\n\r\n    return updatedItem;\r\n  });\r\n  console.log(updatedItems);\r\n  return updatedItems;\r\n}\r\n\r\nexport function moveItemInArray(array, sourceIndex, destinationIndex) {\r\n  const newArray = Array.from(array);\r\n  const movedObject = array[sourceIndex];\r\n  newArray.splice(sourceIndex, 1);\r\n  newArray.splice(destinationIndex, 0, movedObject);\r\n  return newArray;\r\n}\r\n\r\nexport function createReducer(initialState, handlers) {\r\n  return function reducer(state = initialState, action) {\r\n    if (handlers.hasOwnProperty(action.type)) {\r\n      return handlers[action.type](state, action);\r\n    } else {\r\n      return state;\r\n    }\r\n  };\r\n}\r\n\r\nexport function findUniqueName(state, geometry, name = \"new_geometry\", affix = \"\") {\r\n  //If no name is given and the dataset includes a name, use it\r\n  if (geometry.name && name === \"new_geometry\") {\r\n    name = geometry.name;\r\n  }\r\n\r\n  //append any affix, usually to signify how the layer was created (e.g _buffer)\r\n  name = name + affix;\r\n\r\n  //check whether name is already in use, and try appending _1, _2, _3 etc until a name not in use is found\r\n  function isNameUnique(name, layers) {\r\n    if (layers.find(layer => layer.name === name) === undefined) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  var originalName = name;\r\n  var nameIsUnique = isNameUnique(name, state.layers);\r\n  var i = 1;\r\n  while (!nameIsUnique) {\r\n    name = originalName + \"_\" + i;\r\n    i += 1;\r\n\r\n    nameIsUnique = isNameUnique(name, state.layers);\r\n  }\r\n\r\n  return name;\r\n}\r\n\r\nexport function addLayer(state, layer, analysisType = \"new\") {\r\n  //Make a separate variable for display name in case we want to change it in the UI\r\n  layer.displayName = layer.name;\r\n\r\n  //Initialize color\r\n  layer.color = state.activeColor;\r\n\r\n  //Set visibility\r\n  layer.visible = true;\r\n\r\n  state = {\r\n    ...state,\r\n    layers: [layer, ...state.layers],\r\n    triggeredAnalysis: [...state.triggeredAnalysis, analysisType]\r\n  };\r\n  return state;\r\n}\r\n","import buffer from \"@turf/buffer\";\r\n\r\nconst createBuffer = (geom, value, units = \"meters\") => {\r\n  var buffered = buffer(geom, value, { units: units });\r\n  return buffered;\r\n};\r\n\r\nexport default createBuffer;\r\n","import intersect from \"@turf/intersect\";\r\n\r\nconst createIntersect = (geom1, geom2) => {\r\n  let intersects = {\r\n    type: \"FeatureCollection\",\r\n    features: []\r\n  };\r\n  console.log(geom1);\r\n  geom1.geometry.features.forEach(geom1 => {\r\n    geom2.geometry.features.forEach(geom2 => {\r\n      let intersectGeom = intersect(geom1, geom2);\r\n      if (intersectGeom !== null) {\r\n        intersects.features = [...intersects.features, intersectGeom];\r\n      }\r\n    });\r\n  });\r\n  return intersects;\r\n};\r\n\r\nexport default createIntersect;\r\n","import dissolve from \"@turf/dissolve\";\r\n\r\nconst createDissolve = geom => {\r\n  //filter out any multipolygons that turf dissolve can't handle\r\n  var newGeom = geom;\r\n  newGeom.features = geom.features.filter(feature => feature.geometry.type === \"Polygon\");\r\n  var dissolved = dissolve(newGeom);\r\n  return dissolved;\r\n};\r\n\r\nexport default createDissolve;\r\n","import union from \"@turf/union\";\r\n\r\nconst createUnion = (geoms) => {\r\n  var newGeoms = geoms;\r\n \r\n  //filter out any multipolygons that union can't handle\r\n  newGeoms.forEach(newGeom => newGeom.features = newGeom.features.filter(\r\n    feature => feature.geometry.type === \"Polygon\"\r\n  ));\r\n\r\n  function flattenFeatures(total, geom) {\r\n    return ([...total, ...geom.features]);\r\n  }\r\n  console.log(newGeoms);\r\n  var geomFeatures = newGeoms.reduce(flattenFeatures, []);\r\n  console.log(geomFeatures);\r\n\r\n  var unioned = union(...geomFeatures);\r\n  return unioned;\r\n};\r\n\r\nexport default createUnion;\r\n","import { findUniqueName, addLayer } from \"./reducerUtilities\";\r\nimport createBuffer from \"../analysis/buffer\";\r\nimport createIntersect from \"../analysis/intersection\";\r\nimport createDissolve from \"../analysis/dissolve\";\r\nimport createUnion from \"../analysis/union\";\r\n\r\nexport function resolveBufferTrigger(state, action) {\r\n  var value = action.payload.value;\r\n  if (state.selectedLayers.length === 0) {\r\n    alert(\"Please select a feature first\");\r\n    return state;\r\n  }\r\n  state.selectedLayers.forEach(selectedLayerName => {\r\n    let selectedLayer = state.layers.find(\r\n      element => element.name === selectedLayerName\r\n    );\r\n    let index = state.layers.indexOf(selectedLayer);\r\n    let geom = state.layers[index].geometry;\r\n    let bufferGeom = createBuffer(geom, value);\r\n    let name = state.layers[index].name.substring(0, 8);\r\n    name = findUniqueName(state, geom, name, \"_buffer\");\r\n    let layer = {\r\n      geometry: bufferGeom,\r\n      name: name,\r\n      type: \"polygon\"\r\n    };\r\n    state = addLayer(state, layer, \"buffer\");\r\n  });\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveIntersectionTrigger(state, action) {\r\n  if (state.selectedLayers.length !== 2) {\r\n    alert(\"Select two layers to do an intersection\");\r\n    return state;\r\n  }\r\n\r\n  let selectedLayer1 = state.layers.find(\r\n    element => element.name === state.selectedLayers[0]\r\n  );\r\n  let index1 = state.layers.indexOf(selectedLayer1);\r\n  let geom1 = state.layers[index1];\r\n\r\n  let selectedLayer2 = state.layers.find(\r\n    element => element.name === state.selectedLayers[1]\r\n  );\r\n  let index2 = state.layers.indexOf(selectedLayer2);\r\n  let geom2 = state.layers[index2];\r\n\r\n  if (!(geom1.type === \"polygon\" && geom2.type === \"polygon\")) {\r\n    alert(\"Both layers selected must be polygons\");\r\n    return state;\r\n  }\r\n\r\n  let intersectGeom = createIntersect(geom1, geom2);\r\n  let name =\r\n    state.layers[index1].name.substring(0, 5) +\r\n    \"_\" +\r\n    state.layers[index2].name.substring(0, 5);\r\n  name = findUniqueName(state, geom1, name, \"_intersect\");\r\n  let layer = {\r\n    geometry: intersectGeom,\r\n    name: name,\r\n    type: \"polygon\" //TODO handle line and point overlap\r\n  };\r\n\r\n  state = addLayer(state, layer, \"intersect\");\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveDissolveTrigger(state, action) {\r\n  if (state.selectedLayers.length !== 1) {\r\n    alert(\"Please choose exactly one layer to dissolve\");\r\n    return state;\r\n  }\r\n\r\n  let selectedLayer = state.layers.find(\r\n    element => element.name === state.selectedLayers[0]\r\n  );\r\n  let index = state.layers.indexOf(selectedLayer);\r\n\r\n  let geom = selectedLayer.geometry;\r\n  console.log(geom.type);\r\n  if (geom.type !== \"FeatureCollection\") {\r\n    alert(\"Dissolve requires a FeatureCollection layer to be selected\");\r\n    return state;\r\n  }\r\n\r\n  let dissolveGeom = createDissolve(geom);\r\n\r\n  let name = state.layers[index].name.substring(0, 8);\r\n  name = findUniqueName(state, geom, name, \"_dissolve\");\r\n  let layer = {\r\n    geometry: dissolveGeom,\r\n    name: name,\r\n    type: \"polygon\"\r\n  };\r\n\r\n  state = addLayer(state, layer, \"dissolve\");\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveUnionTrigger(state, action) {\r\n  if (state.selectedLayers.length < 2) {\r\n    alert(\"Select at least two layers to do an union\");\r\n    return state;\r\n  }\r\n\r\n  let selectedLayers = findSelectedLayers(state);\r\n  selectedLayers.forEach(selectedLayer => {\r\n    if(selectedLayer.layer.type === \"polygon\"){\r\n      alert(\"All layers selected must be polygon layers\");\r\n      return state;\r\n    }\r\n  });\r\n    \r\n  let geometries = selectedLayers.map(currentLayer => {\r\n    return currentLayer.layer.geometry\r\n  });\r\n\r\n  let unionGeom = createUnion(geometries);\r\n\r\n\r\n  let name = \"union\";\r\n  name = findUniqueName(state, selectedLayers[0].layer, name);\r\n  let layer = {\r\n    geometry: unionGeom,\r\n    name: name,\r\n    type: \"polygon\"\r\n  };\r\n\r\n  state = addLayer(state, layer, \"union\");\r\n\r\n  return state;\r\n}\r\n\r\nexport function resolveDifferenceTrigger(state, action) {\r\n  if (state.selectedLayers.length !== 2) {\r\n    alert(\"Select two layers to do a difference\");\r\n    return state;\r\n  }\r\n  let selectedLayers = findSelectedLayers(state);\r\n\r\n  return state;\r\n}\r\n\r\nfunction findSelectedLayers(state) {\r\n  let selectedLayers = [];\r\n  state.selectedLayers.forEach(selectedLayerName => {\r\n    let layer = state.layers.find(\r\n      element => element.name === selectedLayerName\r\n    );\r\n    let index = state.layers.indexOf(layer);\r\n    let selectedLayer = {\r\n      layer: layer,\r\n      index: index\r\n    };\r\n    selectedLayers = [...selectedLayers, selectedLayer];\r\n  });\r\n  return selectedLayers;\r\n}\r\n","import {\r\n  moveItemInArray,\r\n  updateItemByNameInLayers,\r\n  addLayer,\r\n  findUniqueName\r\n} from \"./reducerUtilities\";\r\nimport {\r\n  resolveBufferTrigger,\r\n  resolveIntersectionTrigger,\r\n  resolveDissolveTrigger,\r\n  resolveUnionTrigger,\r\n  resolveDifferenceTrigger\r\n} from \"./geometryAnalysis\";\r\n\r\nexport const analysisChosen = (state, action) => {\r\n  return {\r\n    ...state,\r\n    selectedAnalysis: action.payload,\r\n    triggeredAnalysis: [...state.triggeredAnalysis, action.payload]\r\n  };\r\n};\r\n\r\nexport const analysisTriggered = (state, action) => {\r\n  if (action.payload.type) {\r\n    switch (action.payload.type.toLowerCase()) {\r\n      case \"buffer\":\r\n        return resolveBufferTrigger(state, action);\r\n      case \"intersection\":\r\n        return resolveIntersectionTrigger(state, action);\r\n      case \"dissolve\":\r\n        return resolveDissolveTrigger(state, action);\r\n      case \"union\":\r\n        return resolveUnionTrigger(state, action);\r\n      case \"difference\":\r\n        return resolveDifferenceTrigger(state, action);\r\n      default:\r\n        console.log(\"Selected analysis is invalid\");\r\n        return state;\r\n    }\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const geometryCreateTriggered = (state, action) => {\r\n  let geometry = action.payload;\r\n  let name = findUniqueName(state, geometry);\r\n  let firstFeature = geometry.features[0];\r\n  let type = firstFeature.geometry.type.toLowerCase();\r\n  var layer = {\r\n    geometry: geometry,\r\n    name: name,\r\n    type: type\r\n  };\r\n  return addLayer(state, layer);\r\n};\r\n\r\nexport const geometryDeleteStarted = (state, action) => {\r\n  const layerToDelete = state.layers.find(\r\n    layer => layer.name === action.payload\r\n  );\r\n  return {\r\n    ...state,\r\n    layersToDelete: [...state.layersToDelete, layerToDelete]\r\n  };\r\n};\r\n\r\nexport const geometryDeleteFinalized = (state, action) => {\r\n  return {\r\n    ...state,\r\n    layers: state.layers.filter(\r\n      layer => layer.name !== state.layersToDelete[0].name\r\n    ),\r\n    layersToDelete: []\r\n  };\r\n};\r\n\r\nexport const layerExpanded = (state, action) => {\r\n  let layerIndex = action.payload;\r\n  //Pane is already open, close it instead\r\n  if (state.expandedLayer === layerIndex) {\r\n    layerIndex = -1;\r\n  }\r\n  return {\r\n    ...state,\r\n    expandedLayer: layerIndex\r\n  };\r\n};\r\n\r\nexport const layerSelected = (state, action) => {\r\n  let layerName = action.payload;\r\n  let newSelectedLayers = Array.from(state.selectedLayers);\r\n  let index = newSelectedLayers.indexOf(layerName);\r\n\r\n  //If found remove, else add to selected layers\r\n  if (index >= 0) {\r\n    newSelectedLayers.splice(index, 1);\r\n  } else {\r\n    newSelectedLayers = [...newSelectedLayers, layerName];\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    selectedLayers: newSelectedLayers\r\n  };\r\n};\r\n\r\nexport const layersRearranged = (state, action) => {\r\n  const { destination, source } = action.payload;\r\n  const newLayers = moveItemInArray(\r\n    state.layers,\r\n    source.index,\r\n    destination.index\r\n  );\r\n\r\n  //Update reference to expanded layer\r\n  var expandedLayer = state.expandedLayer;\r\n  if (source.index === expandedLayer) {\r\n    expandedLayer = destination.index;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    layers: newLayers,\r\n    expandedLayer: expandedLayer,\r\n    layerToMove: destination.index\r\n  };\r\n};\r\n\r\nexport const layersRearrangedDone = (state, action) => {\r\n  return {\r\n    ...state,\r\n    layerToMove: -1\r\n  };\r\n};\r\n\r\nexport const layerVisibilityTrigger = (state, action) => {\r\n  const changeVisibility = layer => {\r\n    let visible = !layer.visible;\r\n    let newLayer = {\r\n      ...layer,\r\n      visible: visible\r\n    };\r\n    return newLayer;\r\n  };\r\n  let newLayers = updateItemByNameInLayers(\r\n    state.layers,\r\n    [action.payload],\r\n    changeVisibility\r\n  );\r\n\r\n  state = {\r\n    ...state,\r\n    layers: newLayers\r\n  };\r\n  return state;\r\n};\r\n\r\nexport const colorChange = (state, action) => {\r\n  const changeLayerColor = (layer, args) => {\r\n    let color = args[0];\r\n    let newLayer = {\r\n      ...layer,\r\n      color: color\r\n    };\r\n    return newLayer;\r\n  };\r\n  //Create a new layers array that is the same except for one color change to selected layer\r\n  let newColor = action.payload;\r\n  let newLayers = updateItemByNameInLayers(\r\n    state.layers,\r\n    state.selectedLayers,\r\n    changeLayerColor,\r\n    newColor\r\n  );\r\n  let newState = Array.from(state);\r\n\r\n  newState = {\r\n    ...state,\r\n    layers: newLayers,\r\n    activeColor: newColor\r\n  };\r\n\r\n  return newState;\r\n};\r\n","import {\r\n  analysisChosen,\r\n  analysisTriggered,\r\n  geometryCreateTriggered,\r\n  layerExpanded,\r\n  layerSelected,\r\n  colorChange,\r\n  geometryDeleteStarted,\r\n  geometryDeleteFinalized,\r\n  layersRearranged,\r\n  layersRearrangedDone,\r\n  layerVisibilityTrigger\r\n} from \"./geometryCaseReducers\";\r\nimport { createReducer } from \"./reducerUtilities\";\r\n\r\nexport const initialGeometryState = {\r\n  selectedAnalysis: \"buffer\",\r\n  triggeredAnalysis: [],\r\n  expandedLayer: -1,\r\n  selectedLayers: [],\r\n  layers: [],\r\n  layersToDelete: [],\r\n  layerToMove: -1,\r\n  activeColor: \"#001eff\"\r\n};\r\n\r\nexport const geometryReducer = createReducer(initialGeometryState, {\r\n  ANALYSIS_CHOSEN: analysisChosen,\r\n  ANALYSIS_TRIGGERED: analysisTriggered,\r\n  GEOMETRY_CREATE_TRIGGERED: geometryCreateTriggered,\r\n  GEOMETRY_DELETE_STARTED: geometryDeleteStarted,\r\n  GEOMETRY_DELETE_FINALIZED: geometryDeleteFinalized,\r\n  LAYER_EXPANDED: layerExpanded,\r\n  LAYER_SELECTED: layerSelected,\r\n  DATA_LIST_REARRANGED: layersRearranged,\r\n  LAYERS_REARRANGED_DONE: layersRearrangedDone,\r\n  COLOR_CHANGE: colorChange,\r\n  LAYER_VISIBILITY_TRIGGER: layerVisibilityTrigger\r\n})","import { combineReducers } from \"redux\";\r\nimport { geometryReducer } from \"./geometryReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  geometry: geometryReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import rootReducer from \"../reducers/reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst store = createStore(rootReducer, {}, applyMiddleware(logger));\r\n\r\nexport default store;\r\n","import { bindActionCreators } from \"redux\";\r\n\r\nimport store from \"../store/store\";\r\n\r\nexport const analysisChoosen = analysisName => ({\r\n  type: \"ANLYSIS_CHOOSEN\",\r\n  payload: analysisName\r\n});\r\nexport const analysisTriggered = analysis => ({\r\n  type: \"ANALYSIS_TRIGGERED\",\r\n  payload: analysis\r\n});\r\n\r\nexport const analysisActions = bindActionCreators(\r\n  {\r\n    analysisChoosen,\r\n    analysisTriggered\r\n  },\r\n  store.dispatch\r\n);\r\n\r\nexport const geometryCreateNew = geometry => ({\r\n  type: \"GEOMETRY_CREATE_TRIGGERED\",\r\n  payload: geometry\r\n});\r\nexport const geometryStartDeletion = name => ({\r\n  type: \"GEOMETRY_DELETE_STARTED\",\r\n  payload: name\r\n});\r\n\r\nexport const geomatryFinalizeDeletion = () => ({\r\n  type: \"GEOMETRY_DELETE_FINALIZED\"\r\n});\r\n\r\nexport const expandLayer = index => ({\r\n  type: \"LAYER_EXPANDED\",\r\n  payload: index\r\n});\r\n\r\nexport const selectLayer = name => ({\r\n  type: \"LAYER_SELECTED\",\r\n  payload: name\r\n});\r\n\r\n\r\nexport const selectColor = hex => ({\r\n  type: \"COLOR_CHANGE\",\r\n  payload: hex\r\n});\r\n\r\nexport const dataLayerDragEnd = result => ({\r\n  type: \"DATA_LIST_REARRANGED\",\r\n  payload: result\r\n});\r\n\r\nexport const layerVisibilityTrigger = layer => ({\r\n  type: \"LAYER_VISIBILITY_TRIGGER\",\r\n  payload: layer\r\n})\r\n\r\nexport const geometryActions = bindActionCreators(\r\n  {\r\n    geometryCreateNew,\r\n    geometryStartDeletion,\r\n    geomatryFinalizeDeletion,\r\n    expandLayer,\r\n    selectLayer,\r\n    selectColor,\r\n    dataLayerDragEnd,\r\n    layerVisibilityTrigger\r\n  },\r\n  store.dispatch\r\n);\r\n\r\nexport const fileUploaded = files => ({\r\n  type: \"GEOMETRY_CREATE_TRIGGERED\",\r\n  payload: JSON.parse(files)\r\n});\r\n\r\nexport const fileActions = bindActionCreators(\r\n  {\r\n    fileUploaded\r\n  },\r\n  store.dispatch\r\n);\r\n","import React from \"react\";\r\n// Import the useDropzone hooks from react-dropzone\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { connect } from \"react-redux\";\r\nimport { fileUploaded } from \"../../../action-creators/actionCreator\";\r\n\r\n\r\n\r\nconst FileUpload = ({ fileUploaded, accept }) => {\r\n  const onDrop = files => {\r\n    if (files && files[0]) {\r\n      let reader = new FileReader();\r\n      let file = files[0];\r\n  \r\n      reader.onloadend = () => {\r\n        fileUploaded(reader.result);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n  \r\n  // Initializing useDropzone hooks with options\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept\r\n  });\r\n\r\n  /* \r\n    useDropzone hooks exposes two functions called getRootProps and getInputProps\r\n    and also exposes isDragActive boolean\r\n  */\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input className=\"dropzone-input\" {...getInputProps()} />\r\n      <div className=\"text-center\">\r\n        {isDragActive ? (\r\n          <p className=\"dropzone-content\">Release to drop the files here</p>\r\n        ) : (\r\n          <p className=\"dropzone-content\">\r\n            Drag 'n' drop some files here, or click to select files\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst actions = {\r\n  fileUploaded: fileUploaded\r\n};\r\n\r\nexport default connect(null, actions)(FileUpload);\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  CardActions,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FileUpload from \"./FileUpload\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst NewFileMenu = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Add new layers</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <FileUpload accept={\"application/json\"}/>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewFileMenu;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  CardActions,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst DataLayerPanel = ({\r\n  name,\r\n  index,\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  selectLayer,\r\n  expandedLayer,\r\n  layerVisibilityTrigger\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Draggable draggableId={name} index={index}>\r\n      {provided => (\r\n        <ExpansionPanel\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          innerRef={provided.innerRef}\r\n          expanded={index === expandedLayer}\r\n          onChange={() => expandLayer(index)}\r\n        >\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-label=\"Expand\"\r\n            aria-controls=\"additional-actions1-content\"\r\n            id=\"additional-actions1-header\"\r\n          >\r\n            <FormControlLabel\r\n              aria-label=\"Select\"\r\n              onClick={event => {\r\n                //Filter out the double onclick when clicking on the text\r\n                if (event.target.type === \"checkbox\") {\r\n                  selectLayer(name);\r\n                }\r\n                //Want to stop expansion effect, just select\r\n                event.stopPropagation();\r\n              }}\r\n              onFocus={event => {\r\n                event.stopPropagation();\r\n              }}\r\n              control={<Checkbox />}\r\n              label={name}\r\n            />\r\n            {/* <Typography className={classes.heading}>{name}</Typography> */}\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <CardActions className={classes.actions}>\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => alert(\"Renaming not yet implemented\")}\r\n              >\r\n                Rename\r\n              </Button>\r\n              <Button size=\"small\" onClick={() => layerVisibilityTrigger(name)}>\r\n                Toggle visibility\r\n              </Button>\r\n              <Button size=\"small\" onClick={() => geometryStartDeletion(name)}>\r\n                Delete\r\n              </Button>\r\n            </CardActions>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default DataLayerPanel;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  List\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport DataLayerPanel from \"./DataLayerPanel\";\r\n\r\nimport {\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  dataLayerDragEnd,\r\n  selectLayer,\r\n  layerVisibilityTrigger\r\n} from \"../../../action-creators/actionCreator\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst DatasetMenu = ({\r\n  expandedLayer,\r\n  layers,\r\n  geometryStartDeletion,\r\n  expandLayer,\r\n  selectLayer,\r\n  dataLayerDragEnd,\r\n  layerVisibilityTrigger\r\n}) => {\r\n  const classes = useStyles();\r\n  \r\n  const onDragEnd = result => {\r\n    const { destination, source } = result;\r\n    //dropped outside of context or otherwise no destination\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    //not moved\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    dataLayerDragEnd(result);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Layers</Typography>\r\n        </ExpansionPanelSummary>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          {/* Everything that is shown on the open panel, but not the closed */}\r\n          <ExpansionPanelDetails className={classes.details}>\r\n            <List>\r\n              <Droppable droppableId=\"datasetMenu\">\r\n                {provided => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    provided={provided}\r\n                  >\r\n                    {layers.map((layer, index) => (\r\n                      <DataLayerPanel\r\n                        className=\"layer\"\r\n                        key={layer.name}\r\n                        name={layer.name}\r\n                        index={index}\r\n                        geometryStartDeletion={geometryStartDeletion}\r\n                        expandLayer={expandLayer}\r\n                        selectLayer={selectLayer}\r\n                        expandedLayer={expandedLayer}\r\n                        layerVisibilityTrigger={layerVisibilityTrigger}\r\n                      ></DataLayerPanel>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </List>\r\n          </ExpansionPanelDetails>\r\n        </DragDropContext>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst select = appState => ({\r\n  expandedLayer: appState.geometry.expandedLayer,\r\n  layers: appState.geometry.layers\r\n});\r\n\r\nconst actions = {\r\n  geometryStartDeletion: geometryStartDeletion,\r\n  expandLayer: expandLayer,\r\n  selectLayer: selectLayer,\r\n  dataLayerDragEnd: dataLayerDragEnd,\r\n  layerVisibilityTrigger: layerVisibilityTrigger\r\n};\r\n\r\nexport default connect(select, actions)(DatasetMenu);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AdjustIcon from \"@material-ui/icons/Adjust\";\r\nimport {\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  ListItemText,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  form: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: 200\r\n    }\r\n  }\r\n}));\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, selectedValue, open } = props;\r\n\r\n  const handleClick = value => {\r\n    onClose(value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  let [inputValue, setInputValue] = React.useState(50);\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Set size of buffer</DialogTitle>\r\n      <form className={classes.form} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"meters\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          onChange={event => setInputValue(event.target.value)}\r\n        />\r\n      </form>\r\n      <Button onClick={() => (handleClick(inputValue))}>Done</Button>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst BufferDialog = ({ analysisTriggered }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = value => {\r\n    setOpen(false);\r\n    analysisTriggered({ type: \"buffer\", value: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n          <AdjustIcon />\r\n        </ListItemIcon>\r\n        <ListItemText\r\n          primary=\"Buffer\"\r\n          secondary=\"Find the area within X meters of the selected layer\"\r\n        />\r\n      </ListItem>\r\n      <SimpleDialog\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default BufferDialog;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider\r\n} from \"@material-ui/core\";\r\nimport CropIcon from \"@material-ui/icons/Crop\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport ViewCompactIcon from \"@material-ui/icons/ViewCompact\";\r\nimport ViewCompactOutlinedIcon from \"@material-ui/icons/ViewCompactOutlined\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { analysisTriggered } from \"../../../action-creators/actionCreator\";\r\nimport { connect } from \"react-redux\";\r\nimport BufferDialog from \"./BufferDialog\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  },\r\n  dividerFullWidth: {\r\n    margin: `5px 0 0 ${theme.spacing(2)}px`\r\n  }\r\n}));\r\n\r\nconst AnalysisMenu = ({ analysisTriggered }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Analysis</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <List dense={true} component=\"nav\" aria-label=\"analysis\">\r\n            <li>\r\n              <Typography\r\n                className={classes.dividerFullWidth}\r\n                color=\"textSecondary\"\r\n                display=\"block\"\r\n                variant=\"caption\"\r\n              >\r\n                Input: Any one layer selected\r\n              </Typography>\r\n            </li>\r\n            <BufferDialog analysisTriggered={analysisTriggered}></BufferDialog>\r\n\r\n            <Divider />\r\n            <li>\r\n              <Typography\r\n                className={classes.dividerFullWidth}\r\n                color=\"textSecondary\"\r\n                display=\"block\"\r\n                variant=\"caption\"\r\n              >\r\n                Input: One polygon layer selected\r\n              </Typography>\r\n            </li>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"dissolve\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <LensIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Dissolve\"\r\n                secondary=\"Merge overlapping polygons within layer\"\r\n              />\r\n            </ListItem>\r\n            <Divider />\r\n            <li>\r\n              <Typography\r\n                className={classes.dividerFullWidth}\r\n                color=\"textSecondary\"\r\n                display=\"block\"\r\n                variant=\"caption\"\r\n              >\r\n                Input: Two polygon layers selected\r\n              </Typography>\r\n            </li>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"intersection\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <CropIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Intersection\"\r\n                secondary=\"Find area that is within both layers\"\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"difference\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <ViewCompactOutlinedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Difference\"\r\n                secondary=\"Find the area within one input layer, but not the other\"\r\n              />\r\n            </ListItem>\r\n            <Divider /> \r\n            <li>\r\n              <Typography\r\n                className={classes.dividerFullWidth}\r\n                color=\"textSecondary\"\r\n                display=\"block\"\r\n                variant=\"caption\"\r\n              >\r\n                Input: Any number of polygon layers selected\r\n              </Typography>\r\n            </li>\r\n            <ListItem\r\n              button\r\n              onClick={() => analysisTriggered({ type: \"union\" })}\r\n            >\r\n              <ListItemIcon>\r\n                <ViewCompactIcon />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary=\"Union\"\r\n                secondary=\"Find the area within all input layers\"\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const select = appState => {\r\n//   return {};\r\n// };\r\nconst actions = {\r\n  analysisTriggered: analysisTriggered\r\n};\r\n\r\nexport default connect(null, actions)(AnalysisMenu);\r\n","import React from \"react\";\r\nimport { SliderPicker } from \"react-color\";\r\nimport { selectColor } from \"../../../action-creators/actionCreator\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst SliderColorPicker = ({ activeColor, selectColor }) => {\r\n  return (\r\n    <div>\r\n      <SliderPicker\r\n        color={activeColor}\r\n        onChangeComplete={color => selectColor(color.hex)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst select = appState => {\r\n  return {\r\n    activeColor: appState.geometry.activeColor\r\n  };\r\n};\r\n\r\nconst actions = {\r\n  selectColor: selectColor\r\n};\r\n\r\nexport default connect(select, actions)(SliderColorPicker);\r\n","import React from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SliderColorPicker from \"./SliderColorPicker\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n    width: \"90%\",\r\n    margin: \"auto\",\r\n    backgroundColor: \"#e8e8e8\"\r\n  }\r\n}));\r\n\r\nconst ColorPicker = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <SliderColorPicker />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  details: {\r\n    display: \"block\"\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nconst ColorMenu = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Color/Visibility</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.details}>\r\n          <ColorPicker />\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorMenu;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport NewFileMenu from \"./new/NewFileMenu\";\r\nimport DatasetMenu from \"./layer/DatasetMenu\";\r\nimport AnalysisMenu from \"./analysis/AnalysisMenu\";\r\nimport ColorMenu from \"./color/ColorMenu\";\r\n\r\nconst Sidebar = ({ className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <NewFileMenu />\r\n      <DatasetMenu />\r\n      <AnalysisMenu />\r\n      <ColorMenu />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styledSidebar = styled(Sidebar)`\r\n  grid-column: 1;\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n  background-color: #4e3a4c;\r\n  overflow: auto;\r\n`;\r\n\r\nexport default styledSidebar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  GridList,\r\n  GridListTileBar,\r\n  GridListTile,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  gridList: {\r\n    flexWrap: \"nowrap\",\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light\r\n  },\r\n  titleBar: {\r\n    background:\r\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\r\n  }\r\n}));\r\n\r\nconst Navbar = ({ className, triggeredAnalysis }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={className}>\r\n      {/* <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={2.5}>\r\n          {triggeredAnalysis.map(analysis => (\r\n            <GridListTile key={analysis}>\r\n              <GridListTileBar\r\n                title={analysis.title}\r\n                classes={{\r\n                  root: classes.titleBar,\r\n                  title: classes.title\r\n                }}\r\n                actionIcon={\r\n                  <IconButton aria-label={`star ${analysis}`}>\r\n                    <StarBorderIcon className={classes.title} />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      </div> \r\n      <List  dense={true} component=\"nav\" aria-label=\"log\">\r\n      {triggeredAnalysis.map(analysis => (\r\n        <ListItem>{analysis}</ListItem>\r\n      ))}\r\n    </List> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styledNavbar = styled(Navbar)`\r\n  grid-column-start: 1;\r\n  grid-column-end: 4;\r\n  grid-row-start: 1;\r\n  grid-row-end: 1;\r\n  background-color: #4e3a4c;\r\n`;\r\n\r\nconst select = appState => ({\r\n  triggeredAnalysis: appState.geometry.triggeredAnalysis\r\n});\r\n\r\nexport default connect(select)(styledNavbar);\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { connect } from \"react-redux\";\r\nimport { geomatryFinalizeDeletion } from \"../action-creators/actionCreator\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidG9vbGF0ZSIsImEiOiJjamNraXM3cWMwdHJ4MnFwZ2tuOXdlM29tIn0.YCpu-_2IAVCvVJEEit8WGQ\";\r\n\r\nclass Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: props.location.lng,\r\n      lat: props.location.lat,\r\n      zoom: props.location.zoom,\r\n      activeLayers: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const { lng, lat, zoom } = this.state;\r\n    this._map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: \"mapbox://styles/mapbox/streets-v9\",\r\n      center: [lng, lat],\r\n      zoom\r\n    });\r\n    var map = this._map;\r\n    map.on(\"move\", () => {\r\n      const { lng, lat } = map.getCenter();\r\n      this.setState({\r\n        lng: lng.toFixed(4),\r\n        lat: lat.toFixed(4),\r\n        zoom: map.getZoom().toFixed(2)\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    var newProps = this.props;\r\n    var newLayers = newProps.layers;\r\n    var prevLayers = prevProps.layers;\r\n    //new layer, add it\r\n    if (newLayers.length > prevLayers.length) {\r\n      let numberOfNewLayers = newLayers.length - prevLayers.length;\r\n      for(var i = 0; i < numberOfNewLayers; i++){\r\n        let layer = newLayers[i];\r\n        switch (layer.type) {\r\n          case \"point\":\r\n            this.addPointLayer(layer);\r\n            break;\r\n          case \"linestring\":\r\n            this.addLineLayer(layer);\r\n            break;\r\n          case \"polygon\":\r\n            this.addPolygonLayer(layer);\r\n            break;\r\n          default:\r\n            console.log(\"invalid layer type\");\r\n            break;\r\n        }\r\n      }      \r\n    }\r\n    //No new layers, can compare new and old props\r\n    else {\r\n      if (newProps.activeColor !== prevProps.activeColor) {\r\n        newProps.selectedLayers.forEach(selectedLayerName => {\r\n          let selectedLayer = newProps.layers.find(\r\n            layer => layer.name === selectedLayerName\r\n          );\r\n          this.setColorOfLayer(selectedLayer);\r\n        });\r\n      }\r\n\r\n      //Loop over layers to check for differences\r\n      newProps.layers.forEach(layer => {\r\n        this.updateVisibility(layer);\r\n      });\r\n    }\r\n\r\n    //Delete layers marked for deletion\r\n    if (newProps.layersToDelete.length > 0) {\r\n      newProps.layersToDelete.forEach(layer => this.removeMapLayer(layer));\r\n    }\r\n\r\n    if (newProps.layerToMove >= 0) {\r\n      this.updateLayerOrder(newProps.layerToMove);\r\n    }\r\n  }\r\n\r\n  addPointLayer(layer) {\r\n    let newLayer = this._map.addLayer({\r\n      id: layer.name,\r\n      type: \"circle\",\r\n      source: {\r\n        type: \"geojson\",\r\n        data: layer.geometry\r\n      },\r\n      paint: { \"circle-color\": layer.color }\r\n    });\r\n\r\n    this.setState({\r\n      activeLayers: [...this.state.activeLayers, newLayer]\r\n    });\r\n  }\r\n\r\n  addLineLayer(layer) {\r\n    let newLayer = this._map.addLayer({\r\n      id: layer.name,\r\n      type: \"line\",\r\n      source: {\r\n        type: \"geojson\",\r\n        data: layer.geometry\r\n      },\r\n      paint: { \"line-color\": layer.color }\r\n    });\r\n    this.setState({\r\n      activeLayers: [...this.state.activeLayers, newLayer]\r\n    });\r\n  }\r\n\r\n  addPolygonLayer(layer) {\r\n    var newLayer = this._map.addLayer({\r\n      id: layer.name,\r\n      type: \"fill\",\r\n      source: {\r\n        type: \"geojson\",\r\n        data: layer.geometry\r\n      },\r\n      // layout: {\r\n      //   \"fill-color\": \"#00ff00\",\r\n      //   \"fill-opacity\": 0.2\r\n      // },\r\n      paint: { \"fill-color\": layer.color, \"fill-outline-color\": \"#000000\" }\r\n    });\r\n\r\n    this.setState({\r\n      activeLayers: [...this.state.activeLayers, newLayer]\r\n    });\r\n  }\r\n\r\n  removeMapLayer(layerToDelete) {\r\n    //check whether delete list is stale\r\n    if (!this._map.getSource(layerToDelete.name)) {\r\n      return;\r\n    }\r\n\r\n    this._map.removeLayer(layerToDelete.name);\r\n    this._map.removeSource(layerToDelete.name);\r\n    this.props.delete_finalize();\r\n  }\r\n\r\n  setColorOfLayer(layer) {\r\n    let colorVariable = \"\";\r\n    if (layer.type === \"point\") {\r\n      colorVariable = \"circle-color\";\r\n    } else if (layer.type === \"polygon\") {\r\n      colorVariable = \"fill-color\";\r\n    }\r\n\r\n    this._map.setPaintProperty(layer.name, colorVariable, layer.color);\r\n  }\r\n\r\n  updateLayerOrder(index) {\r\n    let layers = this.props.layers;\r\n    let layerToUpdateId = layers[index].name;\r\n    let layerBeforeId;\r\n    //If moved to the top of the list, don't draw it behind anything\r\n    if (index === 0) {\r\n      layerBeforeId = null;\r\n    }\r\n    //Else, move it to the spot behind the entry above it in the list\r\n    else {\r\n      layerBeforeId = layers[index - 1].name;\r\n    }\r\n    this._map.moveLayer(layerToUpdateId, layerBeforeId);\r\n  }\r\n\r\n  updateVisibility(layer) {\r\n    var layerVisibility = layer.visible ? \"visible\" : \"none\";\r\n    this._map.setLayoutProperty(layer.name, \"visibility\", layerVisibility);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.className}\r\n        ref={el => (this.mapContainer = el)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst StyledMap = styled(Map)`\r\n  grid-column-start: 2;\r\n  grid-column-end: 4;\r\n  grid-row-start: 2;\r\n  grid-row-end: 4;\r\n`;\r\n\r\nconst select = appState => {\r\n  return {\r\n    selectedLayers: appState.geometry.selectedLayers,\r\n    layers: appState.geometry.layers,\r\n    layersToDelete: appState.geometry.layersToDelete,\r\n    layerToMove: appState.geometry.layerToMove,\r\n    activeColor: appState.geometry.activeColor\r\n  };\r\n};\r\n\r\nconst actions = {\r\n  delete_finalize: geomatryFinalizeDeletion\r\n};\r\n\r\nexport default connect(select, actions)(StyledMap);\r\n","import React, { Component } from \"react\";\r\n\r\nimport AppLayout from \"./AppLayout\";\r\nimport Sidebar from \"./menu/Sidebar\";\r\nimport Navbar from \"./menu/top/Navbar\";\r\nimport Map from \"./Map\";\r\nimport locations from \"../data/locations.json\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AppLayout>\r\n          <Navbar />\r\n          <Sidebar />\r\n          <Map location={locations.oslo} />\r\n        </AppLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}